{"version":3,"file":"audio-src.min.js","sources":["../src/index.js","../src/check/hds.js","../src/check/hls.js","../src/check/mse.js"],"sourcesContent":["/**\r\n * ユーザー環境をチェックして、HDS / HLS / dash.js のソースを HTML5 Audio にセットする\r\n * MPEG-DASHを使う場合は dash.js が必要。\r\n *\r\n *\r\n * @author   Hiroshi Fukuda <info.sygnas@gmail.com>\r\n * @license  MIT\r\n */\r\n\r\n/* globals dashjs */\r\n\r\nimport check_hds from './check/hds';\r\nimport check_hls from './check/hls';\r\nimport check_mse from './check/mse';\r\n\r\n\r\nexport default class {\r\n  /**\r\n   * コンストラクタ\r\n   * @param {Object} config インスタンス設定。this.defaults 参照\r\n   */\r\n  constructor(config) {\r\n    // オーディオソースのタイプ定数\r\n    this.TYPE_HDS = 'hds';\r\n    this.TYPE_HLS = 'hls';\r\n    this.TYPE_MSE = 'mse';\r\n    this.TYPE_FILE = 'file';\r\n\r\n    // デフォルト設定\r\n    const defaults = {\r\n      hds: {\r\n        protcol: 'http://',\r\n        playlist: '/manifest.f4m',\r\n      },\r\n      hls: {\r\n        protcol: 'http://',\r\n        playlist: '/playlist.m3u8',\r\n      },\r\n      mse: {\r\n        protcol: 'http://',\r\n        playlist: '/manifest.mpd',\r\n        autoplay: false,\r\n      },\r\n    };\r\n    // 設定反映\r\n    this.opt = Object.assign(defaults, config);\r\n\r\n    this.audio = new Audio(); // HTML5 Audio\r\n    this.dash_player = null; // dash.js のインスタンス\r\n    this.is_support_hds = false; // HDSを再生できるか\r\n    this.is_support_hls = false; // HLSを再生できるか\r\n    this.is_support_mse = false; // MedisSourceExtensionに対応しているか\r\n    this.now_type = null; // ソースとして設定されたタイプ。TYPE_HDS ... TYPE_FILE などが入る\r\n\r\n    this.$_check_support_result = null; // check_support() の実行結果\r\n  }\r\n\r\n  /**\r\n   * サポート環境チェック\r\n   * @return {Boolean} true: チェック完了 / false: 対象外環境\r\n   */\r\n  check_support() {\r\n    // すでに実行していたらその結果を返す\r\n    if (this.$_check_support_result !== null) return this.$_check_support_result;\r\n\r\n    try {\r\n      this.is_support_hds = check_hds(this.audio); // HDSを再生できるか\r\n      this.is_support_hls = check_hls(this.audio); // HLSを再生できるか\r\n      this.is_support_mse = check_mse(this.audio); // MedisSourceExtensionに対応しているか\r\n    } catch (e) {\r\n      this.$_check_support_result = false;\r\n      return false;\r\n    }\r\n    this.$_check_support_result = true;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * オーディオソースを渡してHTML5 Audioにセットする\r\n   * @param {String} url\r\n   * mp3/ogg など非ストリーミングの場合はファイルのURL。\r\n   * ストリーミングの場合は http://\b{この部分}//manifest.f4m をベースURLとして渡す\r\n   * @param {String} type\r\n   * タイプを指定したい時は TYPE_HDS などを渡す。\r\n   * 非ストリーミングの場合は TYPE_FILE を必ず渡す。\r\n   */\r\n  set_src(url, type = null) {\r\n    if (type === this.TYPE_FILE) {\r\n      return this.$_set_src_file(url);\r\n    } else if (type === this.TYPE_HLS) {\r\n      return this.$_set_src_hls(url);\r\n    } else if (type === this.TYPE_HDS) {\r\n      return this.$_set_src_hds(url);\r\n    } else if (type === this.TYPE_MSE) {\r\n      return this.$_set_src_mse(url);\r\n    } else if (this.is_support_hls) {\r\n      return this.$_set_src_hls(url);\r\n    } else if (this.is_support_hds) {\r\n      return this.$_set_src_hds(url);\r\n    } else if (this.is_support_mse) {\r\n      return this.$_set_src_mse(url);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * private\r\n   */\r\n\r\n  /**\r\n   * 非ストリーミングでセットする\r\n   * @param {String} url\r\n   */\r\n  $_set_src_file(url) {\r\n    this.audio.src = url;\r\n    this.now_type = this.TYPE_FILE;\r\n    return true;\r\n  }\r\n  /**\r\n   * HLS形式でセットする\r\n   * @param {String} url\r\n   */\r\n  $_set_src_hls(url) {\r\n    if (!this.is_support_hls) return false;\r\n\r\n    this.audio.src = this.opt.hls.protcol + url + this.opt.hls.playlist;\r\n    this.now_type = this.TYPE_HLS;\r\n    return true;\r\n  }\r\n  /**\r\n   * HDS形式でセットする\r\n   * @param {String} url\r\n   */\r\n  $_set_src_hds(url) {\r\n    if (!this.is_support_hds) return false;\r\n\r\n    this.audio.src = this.opt.hds.protcol + url + this.opt.hds.playlist;\r\n    this.now_type = this.TYPE_HDS;\r\n    return true;\r\n  }\r\n  /**\r\n   * MSE形式でセットする\r\n   * @param {String} url\r\n   */\r\n  $_set_src_mse(url) {\r\n    if (!this.is_support_mse) return false;\r\n\r\n    // dash.js を使う\r\n    this.now_type = this.TYPE_MSE;\r\n    const src = this.opt.mse.protcol + url + this.opt.mse.playlist;\r\n\r\n    if (this.dash_player === null) {\r\n      this.dash_player = dashjs.MediaPlayer().create();\r\n      this.dash_player.initialize(this.audio, src, this.opt.mse.autoplay);\r\n    } else {\r\n      this.dash_player.attachSource(src);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","/**\r\n * HDSを再生できるか\r\n * @param {Audio} audio\r\n * @return {Boolean} true : OK / false / NG\r\n */\r\nexport default function is_can_play_hds(audio) {\r\n  return audio.canPlayType('application/f4m+xml') === 'maybe';\r\n}\r\n","\r\n/**\r\n * HLSを再生できるか\r\n * @param {Audio} audio\r\n * @return {Boolean} true : OK / false / NG\r\n */\r\nexport default function is_can_play_hls(audio) {\r\n  return audio.canPlayType('application/vnd.apple.mpegURL') === 'maybe';\r\n}\r\n","\r\n/** ************\r\n * MediaSourceExtensionに対応しているか\r\n * @return {Boolean} true : OK / false / NG\r\n */\r\n/* eslint no-void:[\"off\"] */\r\n\r\nexport default function is_support_mse() {\r\n  const hasWebKit = (window.WebKitMediaSource !== null && window.WebKitMediaSource !== void 0);\r\n  const hasMediaSource = (window.MediaSource !== null && window.MediaSource !== void 0);\r\n  return (hasWebKit || hasMediaSource);\r\n}\r\n"],"names":["config","TYPE_HDS","TYPE_HLS","TYPE_MSE","TYPE_FILE","opt","Object","assign","audio","Audio","dash_player","is_support_hds","is_support_hls","is_support_mse","now_type","$_check_support_result","this","canPlayType","check_hds","check_hls","hasWebKit","window","WebKitMediaSource","hasMediaSource","MediaSource","check_mse","e","url","type","$_set_src_file","$_set_src_hls","$_set_src_hds","$_set_src_mse","src","hls","protcol","playlist","hds","mse","dashjs","MediaPlayer","create","initialize","autoplay","attachSource"],"mappings":"kdAqBcA,8GAELC,SAAW,WACXC,SAAW,WACXC,SAAW,WACXC,UAAY,YAmBZC,IAAMC,OAAOC,qBAdL,mBACC,8BAGD,mBACC,+BAGD,mBACC,0BACA,IAIqBP,QAE9BQ,MAAQ,IAAIC,WACZC,YAAc,UACdC,gBAAiB,OACjBC,gBAAiB,OACjBC,gBAAiB,OACjBC,SAAW,UAEXC,uBAAyB,0DASM,OAAhCC,KAAKD,uBAAiC,OAAOC,KAAKD,gCAG/CJ,eC7DX,SAAwCH,SACc,UAA7CA,EAAMS,YAAY,uBD4DCC,CAAUF,KAAKR,YAChCI,eE7DX,SAAwCJ,SACwB,UAAvDA,EAAMS,YAAY,iCF4DCE,CAAUH,KAAKR,YAChCK,eG7DX,eACQO,EAA0C,OAA7BC,OAAOC,wBAA2D,IAA7BD,OAAOC,kBACzDC,EAAyC,OAAvBF,OAAOG,kBAA+C,IAAvBH,OAAOG,mBACtDJ,GAAaG,EH0DKE,CAAUT,KAAKR,OACrC,MAAOkB,eACFX,wBAAyB,GACvB,cAEJA,wBAAyB,GACvB,kCAYDY,OAAKC,yDAAO,YACdA,IAASZ,KAAKZ,UACTY,KAAKa,eAAeF,GAClBC,IAASZ,KAAKd,SAChBc,KAAKc,cAAcH,GACjBC,IAASZ,KAAKf,SAChBe,KAAKe,cAAcJ,GACjBC,IAASZ,KAAKb,SAChBa,KAAKgB,cAAcL,GACjBX,KAAKJ,eACPI,KAAKc,cAAcH,GACjBX,KAAKL,eACPK,KAAKe,cAAcJ,KACjBX,KAAKH,gBACPG,KAAKgB,cAAcL,0CAafA,eACRnB,MAAMyB,IAAMN,OACZb,SAAWE,KAAKZ,WACd,wCAMKuB,WACPX,KAAKJ,sBAELJ,MAAMyB,IAAMjB,KAAKX,IAAI6B,IAAIC,QAAUR,EAAMX,KAAKX,IAAI6B,IAAIE,cACtDtB,SAAWE,KAAKd,UACd,yCAMKyB,WACPX,KAAKL,sBAELH,MAAMyB,IAAMjB,KAAKX,IAAIgC,IAAIF,QAAUR,EAAMX,KAAKX,IAAIgC,IAAID,cACtDtB,SAAWE,KAAKf,UACd,yCAMK0B,OACPX,KAAKH,eAAgB,OAAO,OAG5BC,SAAWE,KAAKb,aACf8B,EAAMjB,KAAKX,IAAIiC,IAAIH,QAAUR,EAAMX,KAAKX,IAAIiC,IAAIF,gBAE7B,OAArBpB,KAAKN,kBACFA,YAAc6B,OAAOC,cAAcC,cACnC/B,YAAYgC,WAAW1B,KAAKR,MAAOyB,EAAKjB,KAAKX,IAAIiC,IAAIK,gBAErDjC,YAAYkC,aAAaX,IAEzB"}